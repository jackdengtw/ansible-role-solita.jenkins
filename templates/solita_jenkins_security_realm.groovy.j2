import jenkins.model.*
import hudson.security.*
import org.jenkinsci.main.modules.cli.auth.ssh.UserPropertyImpl
import com.michelin.cio.hudson.plugins.rolestrategy.*

def solita_jenkins_security_realm = '{{ solita_jenkins_security_realm }}'

def jenkins = Jenkins.getInstance()

if (solita_jenkins_security_realm == 'jenkins') {
    if (!(jenkins.getSecurityRealm() instanceof HudsonPrivateSecurityRealm)) {
        jenkins.setSecurityRealm(new HudsonPrivateSecurityRealm(false))
    }

//    if (!(jenkins.getAuthorizationStrategy() instanceof GlobalMatrixAuthorizationStrategy)) {
//        jenkins.setAuthorizationStrategy(new GlobalMatrixAuthorizationStrategy())
//    }

    def currentUsers = jenkins.getSecurityRealm().getAllUsers().collect { it.getId() }

    if (!('solita_jenkins' in currentUsers)) {
        def user = jenkins.getSecurityRealm().createAccount('solita_jenkins', '{{ solita_jenkins_password }}')
        user.addProperty(new UserPropertyImpl('{{ solita_jenkins_public_key }}'));
        user.save()
    }
//  jenkins.getAuthorizationStrategy().add(Jenkins.ADMINISTER, 'solita_jenkins')

    if (!(jenkins.getAuthorizationStrategy() instanceof RoleBasedAuthorizationStrategy)) {
        def strategy = new RoleBasedAuthorizationStrategy()
        Set<Permission> permissions = new HashSet<Permission>();
        for (PermissionGroup group : strategy.DESCRIPTOR.getGroups(RoleBasedAuthorizationStrategy.GLOBAL)) {
             for (Permission permission : group) {
                  permissions.add(permission);
                }
        }
        Role adminRole = new Role("admin", permissions);
        strategy.addRole(RoleBasedAuthorizationStrategy.GLOBAL, adminRole);
        strategy.assignRole(RoleBasedAuthorizationStrategy.GLOBAL, adminRole, 'solita_jenkins');
        strategy.assignRole(RoleBasedAuthorizationStrategy.GLOBAL, adminRole, "admin");
        jenkins.setAuthorizationStrategy(strategy)
    }
} else if (solita_jenkins_security_realm == 'none') {
    // If we leave the user, further attempts to use jenkins-cli.jar with
    // key-based authentication enabled fail for some reason. Clearing the
    // user's SSH key wasn't enough to solve the problem.
    solita_jenkins_user = jenkins.getUser('solita_jenkins')
    if (solita_jenkins_user) {
        solita_jenkins_user.delete()
    }
    jenkins.disableSecurity()
}
jenkins.save()
